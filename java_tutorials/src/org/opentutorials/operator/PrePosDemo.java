//단항 연산자
/*
 1+2에서 사용한 연산자 +는 이항(二두이 項항목항, infix operator) 연산자이고, 
 좌항인 1과 우항인 2를 더해주는 작업을 하고 있다. 
 단항(單홑단 項항목항, unary) 연산자는 하나의 항을 대상으로 연산이 이루어지는 연산자이다. 
 다음은 자바에서 제공하는 단항 연산자들이다.
  
  +	양수를 표현한다. 실제로는 사용할 필요가 없다.
-	음수를 표현한다.
++	증가(increment) 연산자로 항의 값을 1씩 증가 시킨다.
--	감소(Decrement) 연산자
    
 */

package org.opentutorials.operator;

public class PrePosDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//아래는 단항 연산자들을 사용한 예제다.
		int i = 3;
        i++;
        System.out.println(i); // 4 출력
        ++i;
        
        System.out.println(i); // 5 출력
        
        System.out.println(++i); // 6 출력
        
        System.out.println(i++); // 6 출력
        
        System.out.println(i); // 7 출력
				
		
		/*
		 3행을 보면 i의 값이 3이다. 
		 4행에서 i++를 한 후에 5행에서 출력한 결과는 4가 되었다. 
		 ++는 자신과 결합되어 있는 항의 값에 1을 더하는 연산을 한다. 
		 이것은 아래와 의미가 같다. 자주 사용되는 연산이기 때문에 축약된 형태로 지원하는 것이다.
		 
		 i = i + 1;
		 
		 6행은 4행과 다르게 ++가 i 앞에 나왔다. 
		 결과는 5다. ++가 i의 앞에 붙은 것이나 뒤에 붙은 것이나 결과는 같은 것 같다. 
		 하지만 8행의 결과는 6이고, 9행의 결과값도 6이다. 
		 무언가 이상하다. ++i는 i의 값에 1이 더해진 값을 출력하는 것이고, 
		 i++는 이것이 속해있는 println에 일단 현재 i의 값을 출력하고, 
		 println의 실행이 끝난 후에 i의 값이 증가하는 특성이 있다. 
		 중요한 내용은 아니다. 이해가 안되면 일단 넘어가자.
		 
		 */
		
        /*
         실제로 프로그래밍을 하게 되면 다양한 연산자들을 복합적으로 사용하게 된다. 
         이럴 때 연산의 선후 관계가 분명하지 않으면 혼란스러울 것이다.
         아래는 자바에서 제공하는 연산자들 간의 우선순위를 정리한 표이다.
          
우선순위	   연산자	              결합방향
1	       [ ]	                →
           ()
           .

2	       ++	                ←
           --
           +(양수) -(음수)
           ~
           !
           (type)
           new

3	       * / %	            →

4	       +(더하기) -(빼기)	    →
           +(문자 결합 연산자)

5	       <<	                →
           >>
           >>>

6	       < <=	                →
           > >=
           instanceof

7	       ==	                →
           !=

8	       &	                →
           &

9	       ^	                →
           ^

10	       |	                →
           |
           
11	       &&	                →

12	       ||	                →

13	       ? :	                ←

14	       =	                ←
           *= /= += -= %=
           <<= >>= >>>=
           &= ^= |=
           
          위의 표를 보는 방법을 알아보자. 아래를 계산해보자.
                 
         */
        int t = 4-3*6;
        System.out.println(t);
        
        /*
         위의 구문에는 3가지의 연산자가 등장한다. =, -, * 이다. 
         표에 따라서 우선순위 별로 배열해보면 *, -, =가 된다. 
         그러므로 연산자 *가 제일 먼저 실행된다. 
         따라서 첫 번째 연산은 3*6이 된다. 
         그 값은 18이다. 
         그다음 우선순위는 -다. 
         4-18을 해야 하는데 빼기의 결합 방향은 →이다. 
         따라서 4에서 18을 빼야 한다. 
         그 결과는 -14가 된다. 
         그다음 우선순위는 대입 연산자인 '='이다. '='의 결합방향은 '←'이기 때문에 -14를 변수 a에 대입해서 연산이 끝나게 된다. 
위의 표를 외울 필요는 없다. 자연스럽게 이해하게 된다. 다만, 헷갈리는 경우가 있을 때 이 표의 도움을 받도록 하자.
         
         
         
         
         */
        
		
	}

}
