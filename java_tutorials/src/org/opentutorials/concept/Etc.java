package org.opentutorials.concept;

public class Etc {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

//주석과 세미콜론		
		// 주석		
				// 한줄만 주석을 달고싶을때 : //
				// 여러줄을 한꺼번에 주석으로 만들고 싶을때 : /* */
				
		// JavaDoc 주석
				//자바의 주석이면서  /** */로 끝난다. (일단 넘어가자)
				
		// 세미콜론
				/*세미콜론은 문장(statement)의 끝을 의미한다. 자바에서는 문장의 끝에 세미콜론을 사용하지 않으면 컴파일 에러가 발생한다. 
		         // assignment statement
		         aValue = 8933.234;
		         // increment statement
		         aValue++;
		         // method invocation statement
		         System.out.println("Hello World!");
		         // object creation statement
		         Bicycle myBike = new Bicycle();
				 */
		
//1-2 데이터 타입 크기
		/*
		 * 데이터 타입은 조금 어렵다. 후속 수업에서 필수적인 선행지식은 아니지만, 또 뒤에 배치하는 것도 애매하다. 이번 토픽의 학습이 어렵게 느껴지면 다음 토픽으로 넘어가고 나중에 다시 학습하면 된다.

8 bit (비트)              =	1 byte
1024 byte (바이트)        =	1 kilobyte
1024 kilobyte (킬로바이트) =	1 megabyte
1024 megabyte (메가바이트) =	1 gigabyte
1024 gigabyte  (기가바이트)=	1 terabyte
1024 terabyte (테라바이트) =	1 petabyte
1024 petabyte (페타바이트) =	1 exabyte
1024 exabyte (엑사바이트)  =	1 zettabyte
위 의 표에서 볼 수 있듯이 컴퓨터에 저장되는 정보의 가장 작은 단위는 bit다. 
컴퓨터를 0과 1로 이루어졌다는 말을 들어본 적이 있을 것이다. 바로 이 0과 1이 bit다. 
1bit는 0이나 1의 값을 가질 수 있다. byte는 bit 보다 8배 큰 단위다. 1byte는 8비트다. 
여기까지 지금 기억해야 할 내용이다. 그 외의 내용은 차차 알게 된다. 

		 */

//2-2 데이터 타입 비교
				/*
숫자 - 정수 - 
    |     - 
    |     - int
    |      
    - 실수 - 
          - 
          - double
          - 
				 * 
- 정수형
데이터 타입	메모리의 크기(소모)	표현 가능 범위
byte	     1 byte	        -128 ~ 127
short	     2 byte	        -32,768 ~ 32,767
int	         4 byte	        -2,147,483,648~2,147,483,647 (int가 가장 처리속도 빠르다, 충분히 많은 숫자 표현 가능)
long	     8 byte	        -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
위의 표는 정수에 해당하는 데이터 타입의 리스트다.
아래와 같이 int를 데이터 타입으로 변수를 생성하면 어떻게 되는지를 생각해보자

결과적으로 말해서 정수를 저장할 때는 int를 사용하면 된다. 

- 실수형
데이터 타입	메모리의 크기(소모)	표현 가능 범위
float	    4byte	        ±(1.40129846432481707e-45 ~ 3.40282346638528860e+38)
double	    8byte	        ±(4.94065645841246544e-324d ~ 1.79769313486231570e+308d)

정밀도 대신 큰 범위의 수를 표현할때 실수형을 선택하면 된다.
돈과같이 정확한 계산이 필요할때는 실수형을 쓰면 안된다.
실수형은 float과 double이 있다. 실수를 사용할 때는 double을 사용하도록 하자.

- 문자
char	2byte	모든 유니코드 문자

ex> 'A'  2바이트 사용 
    "AB" 4바이트 사용

자바에서는 문자와 문자열이 다르다. 
문자(character)는 글자 하나를 의미하고, 문자열은 글자들의 집합을 의미한다. 
그럼 문자열은 메모리를 얼마나 사용할까? 문자열은 문자의 집합이라고 했다. 
문자는 char 형이고, char는 2byte의 메모리를 사용한다. 
따라서 6글자를 담고 있는 String 타입의 변수는 12바이트의 공간을 차지하게 된다. 
자세한 내용은 String 클래스의 문자열 길이의 한계를 참고하자.

- 형변환 (암시적)
형 변환(Type Conversion)이란 데이터의 타입을 변경하는 것이다. 예를 들어 int 타입의 정수 200의 bit 값은 아래와 같다.


00000000 00000000 00000000 11001000
프로그래밍을 처음 시작하는 사람도 컴퓨터는 모든 정보가 0과 1로 만들어진다는 이야기를 들어봤을 것이다. 여러분이 200이라는 숫자를 입력하면 컴퓨터에는 위와 같이 0과 1로 이루어진 조합으로 저장된다. 바로 이 0과 1을 bit라고 부른다. 위의 데이터는 8X4개의 자릿수로 이루어져 있다. 이것을 32bit라고 부른다. 위의 데이터는 int 형으로 숫자 200을 저장했을 때 메모리상에 만들어지는 내용이다. 그럼 실수형인 float 타입으로 정수 200.0을 저장하면 어떻게 될까? 사람에게는 똑같은 수인 정수 200과 실수 200.0을 컴퓨터는 전혀 다른 방식으로 저장한다. float 타입의 정수 200.0의 bit 값은 아래와 같다.

01000011 01001000 00000000 00000000
정수 200과 실수 200.0의 bit 값이 완전히 다른 것을 알 수 있다. 이렇게 형식이 다른 데이터들을 더하려면 한쪽의 데이터 타입을 다른 쪽의 데이터 타입으로 전환(Conversion)해야 한다. 자바는 이러한 형 변환을 자동으로 처리해주는데 이러한 전환작업을 자동(암시적) 형 변환(implicit Conversion)이라고 부른다.

-자동 형변환
아래 예제를 보자. (실행)


double a = 3.0F;

위의 코드는 double 타입의 변수 a에 float 타입의 값을 대입하고 있다. 이 때 3.0F의 값은 자동으로 double 타입으로 형 변환이 일어난다. 이것이 가능한 이유는 double 타입이 float 타입보다 더 많은 수를 표현 할 수 있기 때문이다. 타입을 변경해도 정보의 손실이 일어나지 않는 경우 자동 형 변환이 일어난다.

반대로 아래의 예제는 오류가 발생한다. 상수 3.0은 상수인데, 이 상수는 double 형이다. 이 값을 표현 범위가 좁은 float에 넣으려고 하기 때문에 오류가 발생한다. (실행)

float a = 3.0;

자동 형 변환의 원칙은 표현범위가 좁은 데이터 타입에서 넓은 데이터 타입으로의 변환만 허용된다는 것이다.
아래는 자동 형 변환이 일어나는 규칙을 보여준다.

byte    -> short -> int-> long-> float -> double
           chr

byte 타입은 short가 될 수 있지만 short는 byte 타입이 될 수 없다. long은 float가 될 수 있지만, float는 long이 될 수 없다.

상수와 상수를 연산한다면 어떻게 될까? 다음 예제를 보자

int a = 3;
float b = 1.0F;
double c = a + b;

c = 4.0F
정수는 실수로 바꿀수 있지만, 실수는 정수로 바꿀수 없다.

- 형변환 (명시적)
자동 형 변환이 적용되지 않는 경우에는 수동으로 형 변환을 해야 한다.
이를 명시적(Explicit Conversion)이라고 한다. 
아래 예제는 모든 행의 코드에서 오류가 발생한다. 
자동 형 변환이 이루어지지 않기 때문이다.

float a = 100.0;
int b = 100.0F;

위의 예제를 조금 수정해보자. 아래 코드는 오류가 발생하지 않는다
float a = (float)100.0;
int b = (int)100.0F;
아래와 같이 괄호 안에 데이터 타입을 지정해서 값 앞에 위치시키는 것을 명시적인 형 변환이라고 부른다.


				 */
	    float a = (float)100.0;
		int b = (int)100.0F;
				
		
	}

}
