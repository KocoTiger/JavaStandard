/*p. 93~96
# 단항 연산자
	##2.1 증감 연산자 ++, --
	: 증감 연산자의 피연산자로 정수, 실수가 모두 가능
	: 상수는 값을 변경할 수 없으므로 불가.
	: 대부분의 연산자는 피연산자의 값을 읽어서 연산에 사용할 뿐, 피연산자의 값을 변경시키지 않는다.
 	: 오직, 대입산자와 증감연산자만 피연산자의 값을 변경
 	
 			증가연산자(++) : 피연산자의 값을 1증가 
 			감소연산자(--) : 피연산자의 값을 1감소
 	
 	: 일반적으로 단항 연산자는 피연산자의 왼쪽 위치,
 	: 증감 연산자는 양쪽 모두 가능
 				++			피연산자			++
 				--			피연산자			--
	: 전위형(prefix)  : 왼쪽 위치 
	: 후위형(postfix) : 오른쪽 위치
	: 위치에 따라 증감연산자가 수식, 메서드 호출에 포함된 경우 결과가 다르다.

		타입				설명							사용예
		전위형		값이 참조되기 전에 증가시킨다.		j = ++i;
		후위형		값이 참조된 후에 증가시킨다.		J = i++;
	: 반대로, ++i와 i++처럼 증감연산자가 수식이나 메서드 호출에 포함되지 않고
	  독립적인 하나의 문장으로 쓰인경우, 전위, 후위형의 차이가 없다.
				++i;	//i의 값을 1증가
				i++;	//위의 문장과 차이가 없다.

	#2.3 부호 연산자 + -
		- 숫자 : 음수
		+ 숫자 : 양수
	: 부호 연산자는 boolean형과 char형을 제외한 기본형에만 사용 할 수있다.
	[참고] 부호연산자는 덧셈, 뺄셈연산자와 같은 기호를 쓰지만 다른 연산자다.
		  기호는 같아도 피연산자의 개수가 달라서 구별이 가능


 */










//예제 3-1, 3-2
package org.JavaStandards_Ch3;

public class Operator2_1 {

	public static void main(String[] args) {
//3-1	int i = 5;
//		i++;						//i=i+1;과 같은 의미. ++i;로 바꿔도 같음.
//		System.out.println(i);		// 6
//
//		i=5;						//결과값을 비교하기 위해 i값을 다시 5로 변경
//		++i;
//		System.out.println(i);		// 6
//3-2				
//		int i=5, j=0;
//		j = i++;
//		System.out.println("j=i++; 실행 후, i=" + i + ", j=" + j); //j=i++; 실행 후, i=6, j=5
//
//		i=5;			//결과를 비교하기 위해, i와 j의 값을 다시 5와 0으로 변경
//		j=0;
//		
//		j=++i;
//		System.out.println("j=++i; 실행 후, i=" + i + ", j=" + j); //j=++i; 실행 후, i=6, j=6
//		 		j = ++i; 전위형			++i; 	//증가 후에
//										j = i; 	//참조하여 대입
//				j = i++; 후위형			j = i; 	//참조하여 대입 후에
//										i++;	//증가
//		
//3-3		
//		int i=5, j=5;
//		System.out.println(i++);		//5
//		System.out.println(++j);		//6
//		System.out.println("i= " + i + ", j = " + j);	//i= 6, j = 6
//	
//증감연산자 두번 쓸경우?				
//		int x = 5;
//		x = x++ - ++x;    // 실제 프로그래밍에서 이런 코드 쓸일 없다. 바람직하지 않다
//						  // 하나의 식에서 증감연산자의 사용자 최소환 (두번이상 포함된 변수에 증감연산자 사용 x)
//3-4
		int i = -10;
		i = +i;
		System.out.println(i);		//-10
		
		i = -10;
		i = -i;
		System.out.println(i);		//10
		
		
		
		
		
	}

}









