/*p.42~49
#3. 진법 (number system)

#3.1 10진법과 2진법
	일상생활 -> 10진법 (사람)
	1946년 ENIAC 10진법 컴퓨터 -> 전기회로는 전압이 불안정 전압을 10단계로 나누어 처리하는 데 한계
	1950년 EDVAC 2진법 컴퓨터 -> 전기가 흐름 1, 전기가 꺼짐 0 (컴퓨터에게 적합)
	
		age 25 		->		 age 11001
	int age = 25;		//변수 age에 25를 저장

	[참고] int타입의 크기가 4byte
	32자리의 2진수로 표현해야하지만, 앞의 0은 생략.
	앞의 0은 생략하지않으면,
	생략 : 11001
	no 생략 : 0000000000000000000000000011001
	- 2진수, 10진수 비교표 참고
	- 2진수는 10진수를 온전히 표현 가능 (자리수는 많아짐)
	  (덧셈이나 뺄셈같은 연산도 10진수와 동일)

#3.2 비트(bit)와 바이트(byte)
	한자리의 2진수 = 비트 (Binary digit)
	1비트는 컴퓨터가 값을 저장할 수 있는 최소단위
	
	1byte = 8 bit
	
	ㅁ 1bit
	ㅁㅁㅁㅁㅁㅁㅁㅁ 1byte (=8bit)
	ㅁㅁㅁㅁㅁㅁㅁㅁ/ㅁㅁㅁㅁㅁㅁㅁㅁ/ㅁㅁㅁㅁㅁㅁㅁㅁ/ㅁㅁㅁㅁㅁㅁㅁㅁ word (4byte = 32bit)
	[그림] 비트, 바이트, 워드의 크기 비교
	
	- word라는 단위가 있는데, CPU가 한번에 처리할 수있는 데이터의 크기를 의미
	- 워드의 크기는 CPU의 성능에 따라 달라짐
	ex>
		32비트 CPU에서 1워드 = 32비트(4byte)
		64비트 CPU에서 1워드 = 64비트(8바이트)
	[참고] 0001 = 1 같은값, 0001이 크기가 4자리 (4비트)인 데이터를 강조하기위해
		  일부러 빈자리를 0으로 채움
	[표]참고 p.44
	이를 일반화 하면, n비트로 2의 n승개의 값을 표현 가능
	n비트로 10진수를 표현한다면,
	-> 10진수의 범위는 0~2의 n승 -1
	
	4비트로 모두 보면, 16개(2의 4승)의 값을 표현 가능
	4비트로 10진수를 표현한다면, 범위가 0~15(0~2의4승-1)
	
		n비트로 표현할 수 있는 10진수
			값의 개수 : 2의 n승
			값의 범위 : 0 ~ 2의 n승-1
		[참고] 10진수 n자리로 표현할 수있는 값의 범위가 0~10의 n승-1 이라는 것과 비교해보면 이해가 더 쉬움
		10진수 2자리로 표현할 수 읶는 값의 범위 = 0~10의2승-1, 즉 0~99가 된다.

#3.3 8진법과 16진법

   #2진법은 0과1로 표현 (단점 : 자리수가 상당히 길어짐)
	단점 보안을 위해 8진법 16진법을 사용
	
	8진수 : 2진수의 3자리를 한 자리로 표현가능
		 : 8진법을 표현하는데 8개의 기호가 필요 0~7의 숫자를 사용
	16진수: 2진수의 4자리를 한 자리로 표현가능
		 : 16진법은 16개의 기호가 필요 0~9의 숫자만으로는 부족
		 : 6개의 문자 (A~F)를 추가로 사용
		 ex> 16진수 A는 10진수 10, F는 15
		 
	장점 : 자리수가 짧아져서 알아보기도 쉽고 서로간의 변환방법 또한 매우 간단함.
	[그림2-3 참고 p.45]
   
   #2진수를 8진수, 16진수로 변환
   2진수 -> 8진수  : 8진수로 변환하려면, 2진수를 뒤에서부터 3자리씩 끊어서 그에 해당하는 8진수로 바꿈
   				 : 8은 2의3승, 8진수 한자리가 2진수 3자리를 대신할 수 있는 것
   2진수 -> 16진수 : 3자리가 아닌 4자리씩 끊어서 바꿈 (2의 4승)
   [참고] 8,16진수를 2진수로 변환하려면 위와 반대의 과정을 거치면 됨.
   
   [그림2-4] 2진수를 8진수, 16진수로 변환
   		2진수 1010101100(2) -> 1254(8)  -> 2AC(16)

#3.4 정수의 진법 변환

	##10진수를 n진수로 변환 방법
	ex> 46을 2로 나누고 그 몫과 나머지를 아래의 그림과 같이 적음
	
			2/ 46
			   23...0
			   몫	나머지
			   
			 2/ 46
			 2/ 23...0
			 2/ 11...1
			 2/ 5 ...1
			 2/ 2 ...0
			 	1 ...0
			 46(10) -> 101110(2)
		- 마지막 몫부터 나머지를 아래서 위로 순서대로 적으면 2진수로 변환 결과 됨.
	결론 : n진수로 변환하려면, n으로 반복해서 나누기만 하면 됨. (8, 16도 마찬가지)
	
	##n진수를 10진수로 변환
	어떤 진법으로 된 수라도 10진수로 변환하는 방법은 똑같음
	각 자리의 수에 해당 단위의 값을 곱해서 모두 더하면 됨.
	ex>
	123(10)	=	100	+	20	+	3
			=	1	x	100	+	2	x	10	+	3	x	1
			=	1	x	10의 2승	+	2	x	10의 1승	+	3	x	10의0승
	
	마찬가지로 2진수는 다음과 같이 표현 가능.
	각 자리의 단위가 10의제곱이 아니라 2의 제곱인것을 제이하면, 10진수와 동일
	ex>
	101110(2) = 1 x 2의5승 + 0 x 2의4슬 + 1x 2의 3승 + 1x2의 2승 + 1x2의 1승 + 0x2의 0승
			  = 1x32 + 0x16 + 1x8 + 1x4 + 1x2 + 0x1
			  = 46(10)

	8진수, 16진수를 10진수로 변환하는 방법역시 동일
	ex> 1460(8)
	1460(8) = 1x8의3승 + 4x8의2승 + ....
	
	ex> 64F(16)
	64F(16) = 6x16의2승 + 4x16의1승 + Fx16의0승
			= 6x256 + 4x16 + Fx1	//F는 10진수로 15
			= 1536 + 64 + 15
			= 1615(10)

   #3.5 실수의 진법변환
   
   - 10진 소수점수를 2진 소수점수로 변환하는 방법
   : 10진 소수점수에 2를 계속 곱한다.
   
   ex>	10진수 0.625를 진수로 변환
   		1> 10진 소수에 2를 곱한다.
   					0.625 x 2 	= 1.25
   		2> 위의 결과에서 소수부만 가져다가 다시 2를 곱한다.
   					0.625 x 2 	= 1.25
   					0.25 x 2 	= 0.5
   		3> 1>과 2>과정을 소수부가 0이 될때까지 반복한다.
   					0.625 x 2 	= 1.25
   					0.25 x 2 	= 0.5
   					0.5 x 2 	= 1.0
   		[참고] 3>의 과정에서 소수가 0이 되지 않고 무한히 반복될 수도 있다.
   		
   		위의 결과에서 정수부만을 위에서 아해로 순서대로 적고 0.을 앞에 붙이면 된다.
   					0.625 x 2 	= 1.25
   					0.25 x 2 	= 0.5
   					0.5 x 2 	= 1.0
   				0.625(10)	->	0.101(2)
   		
   		[참고] 10진 소수를 10진 소수로 변환하는 방법은 2대신 10을 곱하면 됨
   			  10진 소수를 2진소수로 변환하는 방법을 기억하는 데 도움될 것임
					0.625 x 10 	= 6.25
   					0.25 x 10 	= 2.5
   					0.5 x 10 	= 5.0   		
	
	- 2진 소수점를 10진 소수점수로 변환하는 방법
					0.101(2) => 0.625(10)
	0.625(10) = 6x10의-1승 + 2x10의-2승 + 5x10의-3승
	
	0.101(2) =	1x2의-1승 + 0x2의-2승 + 1x2의-3승
			 =	1x0.5 + 0x0.25 + 1x0.125
			 =	0.5 + 0.125
			 = 0.625(10)
	[참고] 123.456처럼 정수부가 있는 소수점수는 정수부 123과 소수점부 0.456을 따로 변환한 다음에 더하면 된다.

 */






package org.javastandard.javaexercise.ch1variable;

public class ch2_variableEx2_6_NumberSystem1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
