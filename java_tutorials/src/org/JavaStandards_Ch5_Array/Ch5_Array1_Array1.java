/*p. 182 ~187
 #1. 배열(Array)
 	: 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것
 	: 많은 데이터를 저장하기 위함
 	: 데이터의 숫자만큼 변수를 선언해야 한다면 매우 혼란
 	: 10,000개의 데이터를 저장하기 위해 같은 수의 변수를 선언해야한다면 상상하는 것만으로도 상당히 곤혹
 	: 이런 경우, 배열을 사용하면 많은 양의 데이터를 손쉽게 다룰 수 있다.
 	
 			배열은 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것
 			
 	: 여기서 중요한 점! 같은 타입!
 	: 서로 다른 타입의 변수들로 구성된 배열은 만들 수 없다.
 	
 	: 한 학급의 시험점수를 저장 하고자 할 때가 배열을 사용하기 좋은 예.
 	: 만일 배열을 사용하지 않고 학생 5명의 점수를 저장하기 위해서는 아래와 같이 변수 5개를 선언해야함
 	
 		int score1, score2, score3, score4, score5;
 		
 		score1				score5				score3
 		[]		score4		[]		score2		[]			
 				[]					[]	
 	[그림 5-1]p.182 그림 참고(메모리에 생성된 변수들)
 	
 	: 변수 대신 배열을 이용하면, 다음과 같이 간단히 처리 가능
 	: 변수의 선언과 달리 다뤄야할 데이터의 수가 아무리 많아도 단지 배열의 길이만 바꾸면 된다.
 	
 		int[] score = new int[5];  //5개의 int값을 저장할 수 있는 배열을 생성.
 	
 	: 값을 저장할 수있는 공간은 score[0] ~ score[4] 까지 모두 5개
 	  score는 배열을 다루는데 필요한 참조 변수 일뿐 값을 저장하기 위한 공간은 아니다.
 	  
 	  score			score[0]	score[1]	score[2]	score[3]	score[4]
 	  [0x100]	->	[0]			[0]			[0]			[0]			[0]
 					0x100
 		[그림 5-2] 메모리에 생성된 배열
 	
 	: 위의 그림에서 알 수있듯이, 변수와 달리 배열은 각 저장공간이 연속적으로 배치되어 있다는 특징
 
 	##1.2 배열의 선언과 생성
 		: 배열을 선언하는 방법
 		1) 원하는 타입의 변수를 선언
 		2) 변수 또는 타입에 배열임을 의미하는 []대괄호를 붙이면 됨.
 		3) 대괄호 []는 타입 뒤쪽에 붙여도 되고 변수이름 뒤에 붙여도 됨.
 		### 저자의 경우 []를 타입에 붙이는 쪽을 선호(대괄호가 변수 이름의 일부라기 보다는 타입의 일부라고 보기때문)
 		
 				선언 방법				선언 예
 				타입[] 변수이름;		int[] 		score;
 									String[] 	name;
 				타입 변수이름[];		int			score[];
 									String 		name[];
 	###배열의 생성
 	: 배열 생성 시, 선언 후 배열을 생성해야함.
 	: 배열을 선언 하는 것은 단지 배열을 다루기 위한 참조 변수를 위한 공간이 만들어질 뿐.
 	: 배열을 생성해야만 비로소 값을 저장 할 수 있는 공간이 만들어지는 것.
 	: 배열 생성을 위해서는 연산자 new와 함께 배열의 타입과 길이를 지정해 주어여함
 	
 			타입[] 변수이름;			//배열을 선언(배열을 다루기 위한 참조변수 선언)
 			변수이름 = new 타입[길이];	//배열을 생성 (실제 저장공간들을 생성)
 			
 	: 길이가 5인 int 배열을 생성
 			
 			int[] score;		//int타입의 배열을 다루기 위한 참조변수 score선언
 			score = new int[5];	//int타입의 값 5개를 저장할 수 잇는 배열
 			
 	: 배열의 선언과 생성을 동시에 하면 간략히 한 줄로 함.(대부분 이렇게 함)
 			
 		타입[] 변수이름 = new 타입[길이];		//배열의 선언과 생성을 동시에.
 		int[] score	= new int [5];		//길이가 5인 int배열
 		
 	: 배열의 선언과 생성 돠정을 단계별로 그림과 함께 보자면,
 	
 	1) int[] score;
 		: int형 배열 참조 변수 score를 선언
 		: 데이터를 저장 할 수 있는 공간은 아직 마련되지 않음.
 	2) score = new int[5];
 		: 연산자 new에 의해서 메모리의 빈 공간에 5개의 int형 데이터를 저장할 수있는 공간이 마련.
 	 score		score[0]	score[1]	score[2]	score[3]	score[4]
 	 []	->		[]			[]			[]			[]			[]
 				0x100
 				
 		: 각 배열 요소는 자동적으로 int의 기본값 (default)인 0으로 초기화
  	 score		score[0]	score[1]	score[2]	score[3]	score[4]
 	 []	->		[0]			[0]			[0]			[0]			[0]
 				0x100
 		: 마지막으로 대입 연산자 '='에 의해 배열의 주소가 int형 배열 참조변수 score에 저장
   	 score		score[0]	score[1]	score[2]	score[3]	score[4]
 	 [0x100]->	[0]			[0]			[0]			[0]			[0]
 				0x100	
		[참고]배열이 주소 0x100번지에 생성되었다고 가정한 그림
  
  		: 이제 참조 변수 score를 통해, 생성된 배열에 값을 지정 및 읽어 올 수 있다.
  		이 배열은
  			길이가 5인 int배열,	참조변수의 이름을 따서 '배열 score'라고 부르면 된다.
  
  	##1.3배열의 길이와 인덱스
  	: 생성된 배열의 각 저장공간  -> 배열의 요소(element)
  	: 배열이름 [인덱스]형식으로 배열의 요소에 접근
  	: 인덱스 (index) -> 배열의 요소마다 붙여진 일련번호 (각 요소 구별하는데 사용)
  		(우리가 변수의 이름을 지을때 score1,score2,score3과 같이 번호를 붙이는 것과 비슷)
  		(다만 인덱스는 1이아닌 0!부터 시작)
  		
  			인덱스(index)의 범위는 0부터~ '배열길이-1'까지

  	: 예를 들어 길이가 5인 배열은 
  	1) 모두 5개의 요소(저장공간)을 가짐
  	2) 인덱스의 범위는 1부터~5가 아닌, 0부터~4 즉, 0 1 2 3 4가 된다.
  	
  				     [0]배열의 인덱스(index)
    score		score[0]	score[1]	score[2]	score[3]	score[4]
 	 [0x100]->	[0]			[0]			[0]			[0]			[0]
 				0x100	 
  				네모안의 0, 배열의 요소(element)
  	
  	: 배열에 값을 저장하고 읽어오는 방법은 변수와 같다
  	: 단지, 변수이름 대신, 배열이름[index]를 사용한다는 점만 다르다.
	코드 예제:
		score[3] = 100;			//배열의 score의 4번째 요소에 100을 저장한다.
		int value = score[3];	//배열 score의 4번째 요소에 저장된 값을 읽어서 value에 저장
	
	1) score[3] = 100;			//배열의 score의 4번째 요소에 100을 저장한다.

    score		score[0]	score[1]	score[2]	score[3]	score[4]
 	[0x100]->	[0]			[0]			[0]			[100]			[0]
 				0x100  		
  
  	2) int value = score[3];	//배열 score의 4번째 요소에 저장된 값을 읽어서 value에 저장
  
  	score		score[0]	score[1]	score[2]	score[3]	score[4]
 	[0x100]->	[0]			[0]			[0]			[100]			[0]
 				0x100  		
  													value
  													[100]
  	### 배열의 또다른 장점
  		: index로 상수 대신 변수나 수식도 사용 할 수 있다는 것.
  		: 그레서 왼쪽의 코드를 오른쪽과 같이 for문을 이용, 간단히 할 수 있다.
  		: 오른쪽 코드는 index로 상수 대신, 변수 i 사용. for문으로 변수 i의 값을 0~4까지 증가시킴.
  	
  	score[0] = 0;					for(int i=0; i<5; i++){
  	score[1] = 10;						score[i] = i * 10;
  	score[2] = 20;					}
  	score[3] = 30;					
  	score[4] = 40;
  	
  	: for문의 제어변수 i는 배열의 index로 사용하기에 딱 알맞다.
  	: 배열을 다룰 때 for문의 거의 필수적.
  	[참고] 배열과 달리 변수는 아무리 score1, score2, score3과 같이 숫자를 붙여서 이름지어도 
  		  배열처럼 for문을 사용해서 각 변수에 접근할 수 없다.
  		  
  	: 만일, 아래와 같이 []안에 수식이 포함된 경우, 이수식이 제일 먼저 계산됨.
  	  그래야만 배열의 몇번째 요소인지 알 수 있기 때문이다.
  	  				int tmp = score[i+1];
  
  	: 예를 들어 score[3]의 값이 100이고, 변수 i의 값이 2일때, 위의 문장은 다음과 같이 계산.
  	
  			int tmp = score[i+1];
  		->	int tmp = score[2+1];
  		->	int tmp = score[3];
  		->	int tmp = 100;
	###배열을 다룰때 주의 할 점.
		: index의 범위를 벗어난 값을 index로 사용하지 않아야함
		ex> 길이가 5인 배열이 선언되어있을때, 
			index 의 범위는 0~4
			이때 범위를 벗어나는 값인 5를 index로 사용하면 안된다.
			
		int[] score = new int[5]; 	//길이가 5인 int배열. index의 범위는 0~4
		...
		score[5] = 100;				//index의 범위를 벗어난 값을 index로 사용.
		
		: 유효한 범위를 벗어난 값을 index로 사용하는 것은 배열을 다룰 떄 하는 가장 흔한 실수.
		: 컴파일러는 이러한 실수를 걸러주지 못함.
		-이유 : 배열의 index로 변수를 많이 사용, 변수의 값은 실행 시에 대입되므로
			   컴파일러는 이 값의 범위를 확인 할 수 없다.
		: 그래서 유효한 범위의 값을 index로 사용하는 것은 전적으로 프로그래머의 책임.
		유효하지 않은 값을 index로 사용하면, 무사히 컴파일을 마쳤더라도 실행 시,
		에러(ArrayIndexOutBoundsException)가 발생
	[예제 5-1] 
	
  
  
 */





//[예제 5-1] 
package org.JavaStandards_Ch5_Array;

public class Ch5_Array1_Array1 {

	public static void main(String[] args) {
		int[] score = new int [5];
		int k = 1;
		
		score[0] = 50;
		score[1] = 60;
		score[k+1] = 70;		//score[2] = 70
		score[3] = 80;
		score[4] = 90;
		
		int tmp = score[k+2] + score[4];	//int tmp = score[3] + score[4];
		
		//for문으로 배열의 모든 요소를 출력한다.
		
		for (int i=0; i<5; i++) {
			System.out.printf("score[%d]:%d%n",i,score[i]);
		}
		
		System.out.printf("tmp:%d%n", tmp);
		System.out.printf("score[%d]:%d%n",7,score[7]); //index의 범위를 벗어난 값
		
		

	}

}
